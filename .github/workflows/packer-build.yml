name: Packer Custom Image Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  buildpacker:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials for Dev account - only for Packer AMI creation
      - name: Configure AWS Dev credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_DEV}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEV}}
          aws-region: us-east-1

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build with Maven
        env:
          DB_USERNAME: ${{secrets.DB_USERNAME}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        run: mvn clean install -DskipTests

      - name: Run tests
        run: mvn test

      - name: Build Packer Image
        working-directory: packer
        env:
          PACKER_LOG: 1
        run: |
          packer init .
          # Clean and format AMI users string: remove spaces and create JSON array
          AMI_USERS_JSON=$(echo "${{secrets.AMI_USERS}}" | sed 's/ //g' | awk -F',' '{print "[\"" $1 "\",\"" $2 "\"]"}')
          echo "Formatted AMI Users: $AMI_USERS_JSON"
  
          packer validate -var="aws_region=${{secrets.AWS_REGION}}" \
            -var="subnet_id=${{secrets.SUBNET_ID}}" \
            -var="ami_users=$AMI_USERS_JSON" \
            .
          packer build -var="aws_region=${{secrets.AWS_REGION}}" \
            -var="subnet_id=${{secrets.SUBNET_ID}}" \
            -var="ami_users=$AMI_USERS_JSON" \
            .
        id: packer_build

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self 794038208840 724772077256 \
            --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
            --output text)
          
          if [ -z "$AMI_ID" ] || [ "$AMI_ID" = "None" ]; then
            echo "No AMIs found"
            exit 1
          fi
          
          echo "Found latest AMI: $AMI_ID"
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT

      # Switch to Demo credentials for all other operations
      - name: Configure AWS Demo credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_DEMO}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEMO}}
          aws-region: us-east-1

      - name: Update Launch Template
        run: |
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --query 'sort_by(LaunchTemplates, &CreateTime)[-1].LaunchTemplateId' \
            --output text)
          
          if [ -z "$TEMPLATE_ID" ] || [ "$TEMPLATE_ID" = "None" ]; then
            echo "No launch template found"
            exit 1
          fi
          
          echo "Found latest Launch Template ID: $TEMPLATE_ID"
          
          aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --version-description "Auto-created version with new AMI" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{steps.extract_ami.outputs.ami_id}}\"}"
          
          aws ec2 modify-launch-template \
            --launch-template-id $TEMPLATE_ID \
            --default-version '$Latest'

      - name: Start Instance Refresh
        id: refresh
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query 'AutoScalingGroups[?contains(AutoScalingGroupName, `webapp-asg`)].[AutoScalingGroupName]' \
            --output text)
          
          if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" = "None" ]; then
            echo "No ASG found with name containing webapp-asg"
            exit 1
          fi
          
          echo "Found ASG: $ASG_NAME"
          
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "refresh_id=${REFRESH_ID}" >> $GITHUB_OUTPUT
          echo "asg_name=${ASG_NAME}" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh
        run: |
          TIMEOUT=1800  # 30 minutes timeout
          START_TIME=$(date +%s)
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
              echo "Timeout waiting for instance refresh after 30 minutes"
              exit 1
            fi
            
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{steps.refresh.outputs.asg_name}} \
              --instance-refresh-ids ${{steps.refresh.outputs.refresh_id}} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Instance refresh status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi
            
            sleep 30
          done

      - name: Verify Build Status
        if: success()
        run: echo "Deployment completed successfully"
